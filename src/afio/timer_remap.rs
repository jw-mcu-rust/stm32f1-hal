#![allow(unused_variables)]
use super::*;
use crate::{gpio::*, pac::*};

// table
// Do NOT manually modify the code.
// It's generated by scripts/generate_remap_table.py from scripts/table/stm32f1_remap_peripheral.csv

// Register operation ------------

impl RemapMode<TIM1> for RemapDefault<TIM1> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim1_remap().bits(0b00) });
    }
}
impl RemapMode<TIM1> for RemapFull<TIM1> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim1_remap().bits(0b11) });
    }
}
impl RemapMode<TIM1> for RemapPart1<TIM1> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim1_remap().bits(0b01) });
    }
}
impl RemapMode<TIM10> for RemapDefault<TIM10> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim10_remap().clear_bit());
    }
}
impl RemapMode<TIM10> for RemapFull<TIM10> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim10_remap().set_bit());
    }
}
impl RemapMode<TIM11> for RemapDefault<TIM11> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim11_remap().clear_bit());
    }
}
impl RemapMode<TIM11> for RemapFull<TIM11> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim11_remap().set_bit());
    }
}
impl RemapMode<TIM12> for RemapDefault<TIM12> {
    fn remap(afio: &mut Afio) {}
}
impl RemapMode<TIM13> for RemapDefault<TIM13> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim13_remap().clear_bit());
    }
}
impl RemapMode<TIM13> for RemapFull<TIM13> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim13_remap().set_bit());
    }
}
impl RemapMode<TIM14> for RemapDefault<TIM14> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim14_remap().clear_bit());
    }
}
impl RemapMode<TIM14> for RemapFull<TIM14> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim14_remap().set_bit());
    }
}
impl RemapMode<TIM2> for RemapDefault<TIM2> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim2_remap().bits(0b00) });
    }
}
impl RemapMode<TIM2> for RemapFull<TIM2> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim2_remap().bits(0b11) });
    }
}
impl RemapMode<TIM2> for RemapPart1<TIM2> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim2_remap().bits(0b01) });
    }
}
impl RemapMode<TIM2> for RemapPart2<TIM2> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim2_remap().bits(0b10) });
    }
}
impl RemapMode<TIM3> for RemapDefault<TIM3> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim3_remap().bits(0b00) });
    }
}
impl RemapMode<TIM3> for RemapFull<TIM3> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim3_remap().bits(0b11) });
    }
}
impl RemapMode<TIM3> for RemapPart1<TIM3> {
    fn remap(afio: &mut Afio) {
        afio.mapr
            .modify_mapr(unsafe { |_, w| w.tim3_remap().bits(0b10) });
    }
}
impl RemapMode<TIM4> for RemapDefault<TIM4> {
    fn remap(afio: &mut Afio) {
        afio.mapr.modify_mapr(|_, w| w.tim4_remap().clear_bit());
    }
}
impl RemapMode<TIM4> for RemapFull<TIM4> {
    fn remap(afio: &mut Afio) {
        afio.mapr.modify_mapr(|_, w| w.tim4_remap().set_bit());
    }
}
impl RemapMode<TIM5> for RemapDefault<TIM5> {
    fn remap(afio: &mut Afio) {
        afio.mapr.modify_mapr(|_, w| w.tim5ch4_iremap().clear_bit());
    }
}
impl RemapMode<TIM5> for RemapFull<TIM5> {
    fn remap(afio: &mut Afio) {
        afio.mapr.modify_mapr(|_, w| w.tim5ch4_iremap().set_bit());
    }
}
impl RemapMode<TIM8> for RemapDefault<TIM8> {
    fn remap(afio: &mut Afio) {}
}
impl RemapMode<TIM9> for RemapDefault<TIM9> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim9_remap().clear_bit());
    }
}
impl RemapMode<TIM9> for RemapFull<TIM9> {
    fn remap(afio: &mut Afio) {
        afio.mapr2.modify_mapr(|_, w| w.tim9_remap().set_bit());
    }
}

// Binder types ------------------

pub trait TimBkinPin<REMAP> {}
pub trait TimCh1Pin<REMAP> {}
pub trait TimCh1nPin<REMAP> {}
pub trait TimCh2Pin<REMAP> {}
pub trait TimCh2nPin<REMAP> {}
pub trait TimCh3Pin<REMAP> {}
pub trait TimCh3nPin<REMAP> {}
pub trait TimCh4Pin<REMAP> {}
pub trait TimEtrPin<REMAP> {}

// Bind pins ---------------------

impl TimCh1Pin<RemapDefault<TIM1>> for PA8<Alternate<PushPull>> {}
impl TimCh2Pin<RemapDefault<TIM1>> for PA9<Alternate<PushPull>> {}
impl TimCh3Pin<RemapDefault<TIM1>> for PA10<Alternate<PushPull>> {}
impl TimCh4Pin<RemapDefault<TIM1>> for PA11<Alternate<PushPull>> {}
impl TimCh1Pin<RemapFull<TIM1>> for PE9<Alternate<PushPull>> {}
impl TimCh2Pin<RemapFull<TIM1>> for PE11<Alternate<PushPull>> {}
impl TimCh3Pin<RemapFull<TIM1>> for PE13<Alternate<PushPull>> {}
impl TimCh4Pin<RemapFull<TIM1>> for PE14<Alternate<PushPull>> {}
impl TimCh1Pin<RemapPart1<TIM1>> for PA8<Alternate<PushPull>> {}
impl TimCh2Pin<RemapPart1<TIM1>> for PA9<Alternate<PushPull>> {}
impl TimCh3Pin<RemapPart1<TIM1>> for PA10<Alternate<PushPull>> {}
impl TimCh4Pin<RemapPart1<TIM1>> for PA11<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM10>> for PB8<Alternate<PushPull>> {}
#[cfg(feature = "high")]
impl TimCh1Pin<RemapFull<TIM10>> for PF6<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM11>> for PB9<Alternate<PushPull>> {}
#[cfg(feature = "high")]
impl TimCh1Pin<RemapFull<TIM11>> for PF7<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM12>> for PB14<Alternate<PushPull>> {}
impl TimCh2Pin<RemapDefault<TIM12>> for PB15<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM13>> for PA6<Alternate<PushPull>> {}
#[cfg(feature = "high")]
impl TimCh1Pin<RemapFull<TIM13>> for PF8<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM14>> for PA7<Alternate<PushPull>> {}
#[cfg(feature = "high")]
impl TimCh1Pin<RemapFull<TIM14>> for PF9<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM2>> for PA0<Alternate<PushPull>> {}
impl TimCh2Pin<RemapDefault<TIM2>> for PA1<Alternate<PushPull>> {}
impl TimCh3Pin<RemapDefault<TIM2>> for PA2<Alternate<PushPull>> {}
impl TimCh4Pin<RemapDefault<TIM2>> for PA3<Alternate<PushPull>> {}
impl TimCh1Pin<RemapFull<TIM2>> for PA15<Alternate<PushPull>> {}
impl TimCh2Pin<RemapFull<TIM2>> for PB3<Alternate<PushPull>> {}
impl TimCh3Pin<RemapFull<TIM2>> for PB10<Alternate<PushPull>> {}
impl TimCh4Pin<RemapFull<TIM2>> for PB11<Alternate<PushPull>> {}
impl TimCh1Pin<RemapPart1<TIM2>> for PA15<Alternate<PushPull>> {}
impl TimCh2Pin<RemapPart1<TIM2>> for PB3<Alternate<PushPull>> {}
impl TimCh3Pin<RemapPart1<TIM2>> for PA2<Alternate<PushPull>> {}
impl TimCh4Pin<RemapPart1<TIM2>> for PA3<Alternate<PushPull>> {}
impl TimCh1Pin<RemapPart2<TIM2>> for PA0<Alternate<PushPull>> {}
impl TimCh2Pin<RemapPart2<TIM2>> for PA1<Alternate<PushPull>> {}
impl TimCh3Pin<RemapPart2<TIM2>> for PB10<Alternate<PushPull>> {}
impl TimCh4Pin<RemapPart2<TIM2>> for PB11<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM3>> for PA6<Alternate<PushPull>> {}
impl TimCh2Pin<RemapDefault<TIM3>> for PA7<Alternate<PushPull>> {}
impl TimCh3Pin<RemapDefault<TIM3>> for PB0<Alternate<PushPull>> {}
impl TimCh4Pin<RemapDefault<TIM3>> for PB1<Alternate<PushPull>> {}
impl TimCh1Pin<RemapFull<TIM3>> for PC6<Alternate<PushPull>> {}
impl TimCh2Pin<RemapFull<TIM3>> for PC7<Alternate<PushPull>> {}
impl TimCh3Pin<RemapFull<TIM3>> for PC8<Alternate<PushPull>> {}
impl TimCh4Pin<RemapFull<TIM3>> for PC9<Alternate<PushPull>> {}
impl TimCh1Pin<RemapPart1<TIM3>> for PB4<Alternate<PushPull>> {}
impl TimCh2Pin<RemapPart1<TIM3>> for PB5<Alternate<PushPull>> {}
impl TimCh3Pin<RemapPart1<TIM3>> for PB0<Alternate<PushPull>> {}
impl TimCh4Pin<RemapPart1<TIM3>> for PB1<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM4>> for PB6<Alternate<PushPull>> {}
impl TimCh2Pin<RemapDefault<TIM4>> for PB7<Alternate<PushPull>> {}
impl TimCh3Pin<RemapDefault<TIM4>> for PB8<Alternate<PushPull>> {}
impl TimCh4Pin<RemapDefault<TIM4>> for PB9<Alternate<PushPull>> {}
impl TimCh1Pin<RemapFull<TIM4>> for PD12<Alternate<PushPull>> {}
impl TimCh2Pin<RemapFull<TIM4>> for PD13<Alternate<PushPull>> {}
impl TimCh3Pin<RemapFull<TIM4>> for PD14<Alternate<PushPull>> {}
impl TimCh4Pin<RemapFull<TIM4>> for PD15<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM5>> for PA0<Alternate<PushPull>> {}
impl TimCh2Pin<RemapDefault<TIM5>> for PA1<Alternate<PushPull>> {}
impl TimCh3Pin<RemapDefault<TIM5>> for PA2<Alternate<PushPull>> {}
impl TimCh4Pin<RemapDefault<TIM5>> for PA3<Alternate<PushPull>> {}
impl TimCh1Pin<RemapFull<TIM5>> for PA0<Alternate<PushPull>> {}
impl TimCh2Pin<RemapFull<TIM5>> for PA1<Alternate<PushPull>> {}
impl TimCh3Pin<RemapFull<TIM5>> for PA2<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM8>> for PC6<Alternate<PushPull>> {}
impl TimCh2Pin<RemapDefault<TIM8>> for PC7<Alternate<PushPull>> {}
impl TimCh3Pin<RemapDefault<TIM8>> for PC8<Alternate<PushPull>> {}
impl TimCh4Pin<RemapDefault<TIM8>> for PC9<Alternate<PushPull>> {}
impl TimCh1Pin<RemapDefault<TIM9>> for PA2<Alternate<PushPull>> {}
impl TimCh2Pin<RemapDefault<TIM9>> for PA3<Alternate<PushPull>> {}
impl TimCh1Pin<RemapFull<TIM9>> for PE5<Alternate<PushPull>> {}
impl TimCh2Pin<RemapFull<TIM9>> for PE6<Alternate<PushPull>> {}
